import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Map;

/**
 * Your implementation of depth-first search.
 */
public class GraphAlgorithms {

    /**
     * Performs a depth first search (dfs) on the input graph, starting at
     * the parameterized starting vertex.
     *
     * When exploring a vertex, explore in the order of neighbors returned by
     * the adjacency list. Failure to do so may cause you to lose points.
     *
     * NOTE: This method should be implemented recursively. You may need to
     * create a helper method.
     *
     * You may import/use java.util.Set, java.util.List, and any classes that
     * implement the aforementioned interfaces, as long as they are efficient.
     *
     * The only instance of java.util.Map that you may use is the adjacency list
     * from graph. DO NOT create new instances of Map for DFS
     * (storing the adjacency list in a variable is fine).
     *
     * DO NOT modify the structure of the graph. The graph should be unmodified
     * after this method terminates.
     *
     * You may assume that the passed in start vertex and graph will not be null.
     * You may assume that the start vertex exists in the graph.
     *
     * @param <T>   The generic typing of the data.
     * @param start The vertex to begin the dfs on.
     * @param graph The graph to search through.
     * @return List of vertices in visited order.
     */
    public static <T> List<Vertex<T>> dfs(Vertex<T> start, Graph<T> graph) {
         if(start==null){
            throw new IllegalArgumentException("Start value cannot be null.");
        }
        if(graph==null){
            throw new IllegalArgumentException("Cannot traverse null graph.");
        }
        if(!graph.getVertices().contains(start)){
            throw new IllegalArgumentException("Start vertex not in graph.");
        }
        List<Vertex<T>> list = new ArrayList<>();
        Map<Vertex<T>, List<VertexDistance<T>>> adjList = graph.getAdjList();
        Set<Vertex<T>> vertList = new HashSet<>();

        dfsHelper(start, vertList, list, adjList);
        return list;
    }
    
    /**
     * Helper recursive method for DFS
     * 
     * @param
     * @param
     * @param
     * @param
     * 
     */
    private static <T> void dfsHelper(Vertex<T> vert,
                                    Set<Vertex<T>> vertList,
                                    List<Vertex<T>> list, 
                                    Map<Vertex<T>,List<VertexDistance<T>>> adjList) {
        list.add(vert);
        vertList.add(vert);

        for(VertexDistance<T> dist: adjList.get(vert)){

            if(!vertList.contains(dist.getVertex())){
                dfsHelper(dist.getVertex(),vertList, list, adjList);
            }
        }
    }
}