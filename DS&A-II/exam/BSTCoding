import java.util.NoSuchElementException;

/**
 * Your implementation of a BST.
 */
public class BST<T extends Comparable<? super T>> {

    /*
     * Do not add new instance variables or modify existing ones.
     */
    private BSTNode<T> root;
    private int size;

    /*
     * Do not add a constructor.
     */

     /**
     * Returns the data from the tree matching the given parameter.
     *
     * This should be done recursively.
     *
     * Do not return the same data that was passed in. Return the data that
     * was stored in the tree.
     *
     * Hint: Should you use value equality or reference equality?
     *
     * Must be O(log n) for best and average cases and O(n) for worst case.
     *
     * @param data The data to search for. You may assume data is never null.
     * @return The data in the tree equal to the parameter.
     * @throws java.util.NoSuchElementException If the data is not in the tree.
     */
    public T get(T data) {
        if (data == null) {
            throw new IllegalArgumentException("Data can't be null");
        }
        return getHelper(data, root);
    }

    private T getHelper(T data, BSTNode<T> node){
        if (node == null) {
            throw new NoSuchElementException("Data is not found");
        }
        // comparison result in a value for easier comparison
        int compareVal = data.compareTo(node.getData());

        if(compareVal==0){
            return node.getData();
        } else if (compareVal < 0) {
            return getHelper(data, node.getLeft());
        } else {
            return getHelper(data, node.getRight());
        }
    }



    /**
     * Removes and returns the data from the tree matching the given parameter.
     *
     * This must be done recursively.
     *
     * There are 3 cases to consider:
     * 1: The node containing the data is a leaf (no children). In this case,
     * simply remove it.
     * 2: The node containing the data has one child. In this case, simply
     * replace it with its child.
     * 3: The node containing the data has 2 children. Use the PREDECESSOR to
     * replace the data. You should use recursion to find and remove the
     * predecessor (you will likely need an additional helper method to
     * handle this case efficiently).
     *
     * Do NOT return the same data that was passed in. Return the data that
     * was stored in the tree.
     *
     * Hint: Should you use value equality or reference equality?
     *
     * Must be O(log n) for best and average cases and O(n) for worst case.
     *
     * @param data The data to remove. You may assume that data is never null.
     * @return The data that was removed.
     * @throws java.util.NoSuchElementException If the data is not in the tree.
     */
    public T remove(T data) {
        // passed data cannot be null
        if(data == null){
            throw new IllegalArgumentException("Data cannot be null!");
        }
        // new dummy node called removed 
        BSTNode<T> removed = new BSTNode<>(null);
        // recursive helper method for remove
        root = rRemove(data, root, removed);
        return removed.getData();
    }

    private BSTNode<T> rRemove(T data, BSTNode<T> node, BSTNode<T> removed){
        // if curr == null data not found
        if(node==null){
            throw new NoSuchElementException("Data is not found");
        }else{
            // comparison result in a value for easier comparison
            int compareVal = data.compareTo(node.getData());

            if (compareVal<0){
                node.setLeft(rRemove(data, node.getLeft(), removed));
            }else if(compareVal>0){
                node.setRight(rRemove(data, node.getRight(), removed));
            }else{
                // data found 
                removed.setData(node.getData());
                size--;

                if(node.getRight() == null){
                    return node.getLeft();
                }else if(node.getLeft() == null){
                    return node.getRight();
                }else{
                    BSTNode<T> child = new BSTNode<>(null);
                    node.setRight(removeSuccessor(node.getRight(), child));
                    node.setData(child.getData());
                }
            }
        }
        return node;
}

private BSTNode<T> removeSuccessor(BSTNode<T> node, BSTNode<T> child){
        if(node.getLeft() == null){
            child.setData(node.getData());
            return node.getRight();
        }
        node.setLeft(removeSuccessor(node.getLeft(), child));
        return node;
    }


    /**
     * Returns the root of the tree.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return The root of the tree
     */
    public BSTNode<T> getRoot() {
        // DO NOT MODIFY THIS METHOD!
        return root;
    }

    /**
     * Returns the size of the tree.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return The size of the tree
     */
    public int size() {
        // DO NOT MODIFY THIS METHOD!
        return size;
    }
}