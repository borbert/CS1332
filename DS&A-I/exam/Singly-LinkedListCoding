/**
 * Your implementation of a Singly-Linked List.
 */
public class SinglyLinkedList<T> {

    /*
     * Do not add new instance variables or modify existing ones.
     */
    private SinglyLinkedListNode<T> head;
    private SinglyLinkedListNode<T> tail;
    private int size;

    /*
     * Do not add a constructor.
     */

    /**
     * Adds the element to the back of the list.
     *
     * Method should run in O(1) time.
     * 
     * ASSUMPTIONS:
     * - You may assume that the data is not null.
     *
     * @param data the data to add to the back of the list
     */
    public void addToBack(T data) {
        // handle edge cases
        // no data supplied should throw and error
        if(data == null){
            throw new IllegalArgumentException("Cannot add null data to the back of the list!");
        } 
        // new temp node for use in addition functions below
        SinglyLinkedListNode<T> temp = new SinglyLinkedListNode<>(data);
        
        if(head == null){ // list is empty
            head = temp;
            tail = temp;
        } else {
            tail.setNext(temp);
            tail = temp;
            tail.setNext(null);
        }
        size++;
    }

    /**
     * Returns the head node of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the node at the head of the list
     */
    public SinglyLinkedListNode<T> getHead() {
        // DO NOT MODIFY THIS METHOD!
        return head;
    }

    /**
     * Returns the tail node of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the node at the tail of the list
     */
    public SinglyLinkedListNode<T> getTail() {
        // DO NOT MODIFY THIS METHOD!
        return tail;
    }

    /**
     * Returns the size of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the size of the list
     */
    public int size() {
        // DO NOT MODIFY THIS METHOD!
        return size;
    }
}