import java.util.NoSuchElementException;

/**
 * Your implementation of an ArrayList.
 */
public class ArrayList<T> {

    /*
     * The initial capacity of the ArrayList.
     *
     * DO NOT MODIFY THIS VARIABLE!
     */
    public static final int INITIAL_CAPACITY = 9;

    /*
     * Do not add new instance variables or modify existing ones.
     */
    private T[] backingArray;
    private int size;

    /**
     * This is the constructor that constructs a new ArrayList.
     * 
     * Recall that Java does not allow for regular generic array creation,
     * so instead we cast an Object[] to a T[] to get the generic typing.
     */
    public ArrayList() {
        //DO NOT MODIFY THIS METHOD!
        backingArray = (T[]) new Object[INITIAL_CAPACITY];

    }

    /**
     * Adds the data to the front of the list.
     *
     * This add may require elements to be shifted.
     *
     * Method should run in O(n) time.
     *
     * @param data the data to add to the front of the list
     * @throws java.lang.IllegalArgumentException if data is null
     */
    public void addToFront(T data) {
        // If null data is passed in the parameters need to throw an IllegalArgumentException
        if(data== null){
            throw new IllegalArgumentException("Error:  you cannot pass null data to the 'addToFront' method!");
        };
        // If the size is at capacity resize the array to double the size
        if(size>=backingArray.length){
            // create new array at double capacity
            T[] newArray = (T[]) new Object[2 * backingArray.length];
            // copy over the values of the previous array to the new one
            for(int i=0; i < backingArray.length; i++){
                newArray[i] = backingArray[i];
            }
            // set the backingArray to the value of the newArray
            backingArray = newArray;
        }
        // loop through the values of the backingArray 
        // shifting the values over to the right by one
        for(int i = size;i > 0; i--){
            backingArray[i]=backingArray[i-1];
        }
        //increment the size varible and assign the data to the first element in the array
        size++;
        backingArray[0]=data;
    }

    /**
     * Adds the data to the back of the list.
     *
     * Method should run in amortized O(1) time.
     *
     * @param data the data to add to the back of the list
     * @throws java.lang.IllegalArgumentException if data is null
     */
    public void addToBack(T data) {
        // If null data is passed in the parameters need to throw an IllegalArgumentException
        if(data== null){
            throw new IllegalArgumentException("Error:  you cannot pass null data to the 'addToBack' method!");
        };
        // If the size is at capacity resize the array to double the size
        if(size>=backingArray.length){
            T[] newArray = (T[]) new Object[2*backingArray.length];
            for(int i=0;i<backingArray.length;i++){
                newArray[i] = backingArray[i];
            }
            backingArray=newArray;
        }
        // set the value of the last element to data and increment the size varible.
        backingArray[size]=data;
        size++;
    }

    /**
     * Removes and returns the first data of the list.
     *
     * Do not shrink the backing array.
     *
     * This remove may require elements to be shifted.
     *
     * Method should run in O(n) time.
     *
     * @return the data formerly located at the front of the list
     * @throws java.util.NoSuchElementException if the list is empty
     */
    public T removeFromFront() {
        // if the size is 0 then do nothing and return from execution
        if(size<=0){
            throw new NoSuchElementException("Element(s) not in array, it is likely empty array.");
        };
        // create a new temporary array `newArray` of type backingArray
        T newArray = backingArray[0];
        // loop through backing array essentially move the values to the left one space
        for(int i=0;i<size-1;i++){
            backingArray[i]=backingArray[i+1];
        }
        // set the last element in the array to null and decrement the size variable
        backingArray[size-1]=null;
        size--;
        
        return newArray;
    }

    /**
     * Removes and returns the last data of the list.
     *
     * Do not shrink the backing array.
     *
     * Method should run in O(1) time.
     *
     * @return the data formerly located at the back of the list
     * @throws java.util.NoSuchElementException if the list is empty
     */
    public T removeFromBack() {
        // if the size is 0 then do nothing and return from execution
        if(size<=0){
            throw new NoSuchElementException("Element(s) not in array, it is likely empty array.");

        };
        // new temporary array `newArray` of type backingArray with one less element
        T newArray = backingArray[size - 1];

        // set last element of backing array to null and decrement size variable
        backingArray[size-1]=null;
        size--;
        
        return newArray;
    }

    /**
     * Returns the backing array of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the backing array of the list
     */
    public T[] getBackingArray() {
        // DO NOT MODIFY THIS METHOD!
        return backingArray;
    }

    /**
     * Returns the size of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the size of the list
     */
    public int size() {
        // DO NOT MODIFY THIS METHOD!
        return size;
    }
}