import java.util.NoSuchElementException;

/**
 * Your implementation of a Singly-Linked List.
 * @author Bob Owens
 */
public class SinglyLinkedList<T> {
    // Do not add new instance variables or modify existing ones.
    private SinglyLinkedListNode<T> head;
    private SinglyLinkedListNode<T> tail;
    private int size;

    /**
     * Adds the element to the front of the list.
     * @param data the data to add to the front of the list
     * @throws java.lang.IllegalArgumentException if data is null
     */
    public void addToFront(T data) {
        // Check for edge cases 
        // no data is a problem throw exception
        if(data == null){
            throw new IllegalArgumentException("Cannot add null data to the front of the list!");
        }
        // temp node used to create a new node with the data in it
        SinglyLinkedListNode<T> temp = new SinglyLinkedListNode<>(data);
        
        // if there is 1 item in list link to itself and set as head and tail
        if(head == null){
            head = temp;
            tail = temp;
        }else{
            // take the new node and place it at the head
            // tail should remain the same
            temp.setNext(head);
            head = temp;
        }
        // increment the size varible
        size++;
    }

    /**
     * Adds the element to the back of the list.
     * @param data the data to add to the back of the list
     * @throws java.lang.IllegalArgumentException if data is null
     */
    public void addToBack(T data) {
        // handle edge cases
        // no data supplied should throw and error
        if(data == null){
            throw new IllegalArgumentException("Cannot add null data to the back of the list!");
        } 
        // new temp node for use in addition functions below
        SinglyLinkedListNode<T> temp = new SinglyLinkedListNode<>(data);
        
        if(head == null){ // list is empty
            head = temp;
            tail = temp;
        } else {
            tail.setNext(temp);
            tail = temp;
            tail.setNext(null);
        }
        size++;
    }

    /**
     * Removes and returns the first data of the list.
     *
     * Method should run in O(1) time.
     *
     * @return the data formerly located at the front of the list
     * @throws java.util.NoSuchElementException if the list is empty
     */
    public T removeFromFront() {
        // edge case
        // the case of an empty list --- should return null
        if(size == 0){
            throw new NoSuchElementException("Cannot remove from empty list!");
        }
        // add a temp node current to guide the process and return in the end
        SinglyLinkedListNode<T> current = head;

        if(size == 1){
            head = null;
            tail = null;
        } else {
            // if there is more than one item in list
            // move head pointer and java garabage collection does the rest
            head = head.getNext();
        }
        size--;

        return current.getData();
    }

    /**
     * Removes and returns the last data of the list.
     *
     * Method should run in O(n) time.
     *
     * @return the data formerly located at the back of the list
     * @throws java.util.NoSuchElementException if the list is empty
     */
    public T removeFromBack() {
        // edge case(s)
        // the case of an empty list --- should return null
        if(size == 0){
            throw new NoSuchElementException("Cannot remove from empty list!");
        } else if(size == 1){
            // one item in list
            head = null;
            tail = null;
        } else {
            // if there is more than one item in list
            // need it to be the head as a starting point to traverse from
            SinglyLinkedListNode<T> current = head;
            
            // recursive call to traverse the list
            while(current.getNext().getNext()!=null){
                current=current.getNext();
            }
            // the current should be the node before the tail
            // set it to the tail
            tail = current;
            // set the pointer just before the old tail to null and 
            // garabage collection handles the rest
            tail.setNext(null);
        }
        size--;
        
        return current.getData();
    }

    /**
     * Returns the head node of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the node at the head of the list
     */
    public SinglyLinkedListNode<T> getHead() {
        // DO NOT MODIFY THIS METHOD!
        return head;
    }

    /**
     * Returns the tail node of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the node at the tail of the list
     */
    public SinglyLinkedListNode<T> getTail() {
        // DO NOT MODIFY THIS METHOD!
        return tail;
    }

    /**
     * Returns the size of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the size of the list
     */
    public int size() {
        // DO NOT MODIFY THIS METHOD!
        return size;
    }
}